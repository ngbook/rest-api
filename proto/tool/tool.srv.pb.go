// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ngbook/proto/tool/tool.srv.proto

/*
Package tool_srv is a generated protocol buffer package.

It is generated from these files:
	ngbook/proto/tool/tool.srv.proto

It has these top-level messages:
	GetIpReq
	GetIpRsp
*/
package tool_srv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetIpReq struct {
}

func (m *GetIpReq) Reset()                    { *m = GetIpReq{} }
func (m *GetIpReq) String() string            { return proto.CompactTextString(m) }
func (*GetIpReq) ProtoMessage()               {}
func (*GetIpReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetIpRsp struct {
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (m *GetIpRsp) Reset()                    { *m = GetIpRsp{} }
func (m *GetIpRsp) String() string            { return proto.CompactTextString(m) }
func (*GetIpRsp) ProtoMessage()               {}
func (*GetIpRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetIpRsp) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func init() {
	proto.RegisterType((*GetIpReq)(nil), "GetIpReq")
	proto.RegisterType((*GetIpRsp)(nil), "GetIpRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ToolService service

type ToolServiceClient interface {
	GetIp(ctx context.Context, in *GetIpReq, opts ...client.CallOption) (*GetIpRsp, error)
}

type toolServiceClient struct {
	c           client.Client
	serviceName string
}

func NewToolServiceClient(serviceName string, c client.Client) ToolServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "toolservice"
	}
	return &toolServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *toolServiceClient) GetIp(ctx context.Context, in *GetIpReq, opts ...client.CallOption) (*GetIpRsp, error) {
	req := c.c.NewRequest(c.serviceName, "ToolService.GetIp", in)
	out := new(GetIpRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ToolService service

type ToolServiceHandler interface {
	GetIp(context.Context, *GetIpReq, *GetIpRsp) error
}

func RegisterToolServiceHandler(s server.Server, hdlr ToolServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&ToolService{hdlr}, opts...))
}

type ToolService struct {
	ToolServiceHandler
}

func (h *ToolService) GetIp(ctx context.Context, in *GetIpReq, out *GetIpRsp) error {
	return h.ToolServiceHandler.GetIp(ctx, in, out)
}

func init() { proto.RegisterFile("ngbook/proto/tool/tool.srv.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 123 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xc8, 0x4b, 0x4f, 0xca,
	0xcf, 0xcf, 0xd6, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f, 0xc9, 0xcf, 0xcf, 0x01, 0x13, 0x7a,
	0xc5, 0x45, 0x65, 0x7a, 0x60, 0x31, 0x25, 0x2e, 0x2e, 0x0e, 0xf7, 0xd4, 0x12, 0xcf, 0x82, 0xa0,
	0xd4, 0x42, 0x25, 0x29, 0x18, 0xbb, 0xb8, 0x40, 0x88, 0x8f, 0x8b, 0x29, 0xb3, 0x40, 0x82, 0x51,
	0x81, 0x51, 0x83, 0x33, 0x88, 0x29, 0xb3, 0xc0, 0x48, 0x8f, 0x8b, 0x3b, 0x24, 0x3f, 0x3f, 0x27,
	0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0x48, 0x9e, 0x8b, 0x15, 0xac, 0x54, 0x88, 0x53, 0x0f,
	0xa6, 0x5d, 0x0a, 0xc6, 0x2c, 0x2e, 0x50, 0x62, 0x48, 0x62, 0x03, 0x1b, 0x6f, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x14, 0x8f, 0xb0, 0x06, 0x82, 0x00, 0x00, 0x00,
}
